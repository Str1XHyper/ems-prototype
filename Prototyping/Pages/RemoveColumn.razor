@page "/editcolumn"
@using Interfaces
@using Models.Enums
@using Models.Extensions
@using Models.Structs
@inject IJSRuntime JSRuntime
@inject IEntityService EntityService
<h1>Edit column</h1>
<div class="flex flex-wrap flex-column card ">
    <table>
        <tr>
            <th>
                @nameof(ColDescriptor.ColumnName)
            </th>
            <th>
                @nameof(ColDescriptor.ColumnDisplayName)
            </th>
            <th>

                @nameof(ColDescriptor.ColumnValueType)
            </th>
            <th>

                @nameof(ColDescriptor.ColumnEnabled)
            </th>
            <th>
                Actions
            </th>

        </tr>
        @foreach (var descriptor in _colDescriptors)
        {
            <tr>
                <td>
                    @descriptor.ColumnName
                </td>
                <td>
                    @descriptor.ColumnDisplayName
                </td>
                <td>
                    @descriptor.ColumnValueType
                </td>
                <td>
                    @descriptor.ColumnEnabled
                </td>
                @if (_colDescriptors.ToList().IndexOf(descriptor) != 0)
                {
                    <td>
                        <button @onclick="()=> { ShowDialog(descriptor);}" class="btn btn-outline-primary"><i class="fas fa-pencil"></i></button>
                        <button @onclick="() => { RemoveColumnFunc(descriptor.DescriptorId);}" class="btn btn-outline-danger"><i class="fas fa-trash"></i></button>
                    </td>
                }
            </tr>
        }
    </table>
</div>

<dialog id="edit-column-dialog">
    <EditForm  OnValidSubmit="EditColumnFunc" Model="SelectedColDescriptor">
        <DataAnnotationsValidator/>
        <div class="field">
            
            <label for="name-input">Name</label>
            <InputText id="name-input" @bind-Value="SelectedColDescriptor.ColumnDisplayName" placeholder="Column name"/>
            <ValidationMessage For="@(() => SelectedColDescriptor.ColumnName)"/>
        </div>
        <div class="field field-dropdown">
            <label for="type-input">Type</label>
            <InputSelect id="type-input" @bind-Value="SelectedColDescriptor.ColumnValueType">
                @foreach (var item in Enum.GetValues(typeof(ValueTypes)))
                {
                    <option value="@item">@item.ToString()</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => SelectedColDescriptor.ColumnValueType)"/>
            
        </div>
        <div class="field field-checkbox">
            <label for="enabled-input" ></label>
            <InputCheckbox id="enabled-input" @bind-Value="SelectedColDescriptor.ColumnEnabled"> Enabled </InputCheckbox>
            <ValidationMessage For="@(() => SelectedColDescriptor.ColumnValueType)"/>
            
        </div>
    
        <button @onclick="() => { success = false; }" value="cancel" formmethod="dialog" class="btn btn-danger">Cancel</button>
        <button type="submit" @onclick="() => { success = true; }" class="btn btn-primary">Update</button>
    
    </EditForm>
</dialog>

<style>
    .field input {
        font-size: 16px;
        line-height: 28px;
        padding: 8px 16px;
        width: 100%;
        min-height: 44px;
        border: unset;
        border-radius: 4px;
        outline-color: rgb(84 105 212 / 0.5);
        background-color: rgb(255, 255, 255);
        box-shadow: rgba(0, 0, 0, 0) 0px 0px 0px 0px, 
                    rgba(0, 0, 0, 0) 0px 0px 0px 0px, 
                    rgba(0, 0, 0, 0) 0px 0px 0px 0px, 
                    rgba(60, 66, 87, 0.16) 0px 0px 0px 1px, 
                    rgba(0, 0, 0, 0) 0px 0px 0px 0px, 
                    rgba(0, 0, 0, 0) 0px 0px 0px 0px, 
                    rgba(0, 0, 0, 0) 0px 0px 0px 0px;
    }
    
    input[type="submit"] {
        background-color: rgb(84, 105, 212);
        box-shadow: rgba(0, 0, 0, 0) 0px 0px 0px 0px, 
                    rgba(0, 0, 0, 0) 0px 0px 0px 0px, 
                    rgba(0, 0, 0, 0.12) 0px 1px 1px 0px, 
                    rgb(84, 105, 212) 0px 0px 0px 1px, 
                    rgba(0, 0, 0, 0) 0px 0px 0px 0px, 
                    rgba(0, 0, 0, 0) 0px 0px 0px 0px, 
                    rgba(60, 66, 87, 0.08) 0px 2px 5px 0px;
        color: #fff;
        font-weight: 600;
        cursor: pointer;
    }
    .field-checkbox input {
        width: 20px;
        height: 15px;
        margin-right: 5px; 
        box-shadow: unset;
        min-height: unset;
    }
    .field-checkbox label {
        display: flex;
        align-items: center;
        margin: 0;
    }
    .field-dropdown select{
        font-size: 16px;
        line-height: 28px;
        padding: 8px 16px;
        width: 100%;
        border: unset;
        border-radius: 4px;
        outline-color: rgb(84 105 212 / 0.5);
        background-color: rgb(255, 255, 255);
        box-shadow: rgba(0, 0, 0, 0) 0px 0px 0px 0px, 
                    rgba(0, 0, 0, 0) 0px 0px 0px 0px, 
                    rgba(0, 0, 0, 0) 0px 0px 0px 0px, 
                    rgba(60, 66, 87, 0.16) 0px 0px 0px 1px, 
                    rgba(0, 0, 0, 0) 0px 0px 0px 0px, 
                    rgba(0, 0, 0, 0) 0px 0px 0px 0px, 
                    rgba(0, 0, 0, 0) 0px 0px 0px 0px;
    }
    
    .field-dropdown label{
        display: flex;
        align-items: center;
        margin: 0;
    }
</style>

@code {
    IEnumerable<ColDescriptor> _colDescriptors;

    ColDescriptor SelectedColDescriptor = new();
    
    public bool success { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _colDescriptors = EntityService.GetTableSpec();
    }

    private void RemoveColumnFunc(Guid id)
    {
        EntityService.RemoveColumn(id);
        _colDescriptors = EntityService.GetTableSpec();
    }

    private void ShowDialog(ColDescriptor colDescriptor)
    {
        SelectedColDescriptor.CopyFrom(colDescriptor);
        JSRuntime.InvokeVoidAsync("ShowDialog", "edit-column-dialog");
    }

    private void EditColumnFunc()
    {
        JSRuntime.InvokeVoidAsync("HideDialog", "edit-column-dialog");
        if (success)
        {
            EntityService.UpdateColumn(SelectedColDescriptor);
        }

        _colDescriptors = EntityService.GetTableSpec();
    }

}