@page "/editcolumn"
@using Interfaces
@using Models.Enums
@using Models.Extensions
@using System.ComponentModel.DataAnnotations
@using Models
@using Models.Models
@inject IJSRuntime JSRuntime
@inject IEntityService EntityService
<div class="d-flex flex-row justify-content-between align-items-center px-2">
    <h1>Edit column</h1>
    <button @onclick="() => { AddDialog(); }" class="btn btn-success">Add</button>
</div>
<div class="flex flex-wrap flex-column card ">
    <table class="result-table">
        <colgroup>
            <col>
            <col>
            <col>
            <col>
            <col>
            <col>
        </colgroup>
        <tr>
            <th>
                @nameof(ColDescriptor.ColumnName)
            </th>
            <th>
                @nameof(ColDescriptor.ColumnDisplayName)
            </th>
            <th>
                @nameof(ColDescriptor.ColumnValueType)
            </th>
            <th>
                @nameof(ColDescriptor.ColumnEnabled)
            </th>
            <th>
                @nameof(ColDescriptor.ColumnVisible)
            </th>
            <th>
                @nameof(ColDescriptor.ValueEditable)
            </th>
            <th>
                Actions
            </th>

        </tr>
        @foreach (var descriptor in _colDescriptors)
        {
            <tr>
                <td>
                    @descriptor.ColumnName
                </td>
                <td>
                    @descriptor.ColumnDisplayName
                </td>
                <td>
                    @descriptor.ColumnValueType
                </td>
                <td>
                    @descriptor.ColumnEnabled
                </td>
                <td>
                    @descriptor.ColumnVisible
                </td>
                <td>
                    @descriptor.ValueEditable
                </td>
                @if (descriptor.ColumnEditable)
                {
                    <td>
                        <button @onclick="() => { ShowDialog(descriptor); }" class="btn btn-outline-primary">
                            <i class="fas fa-pencil"></i>
                        </button>
                        <button @onclick="() => { RemoveColumnFunc(descriptor.DescriptorId); }" class="btn btn-outline-danger">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                }
                else
                {
                    <td>
                        <button disabled class="btn btn-outline-primary">
                            <i class="fas fa-pencil"></i>
                        </button>
                        <button disabled class="btn btn-outline-danger">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                }
            </tr>
        }
    </table>
</div>
        <div class="field field-dropdown" style="max-width: 400px">
        <InputSelect Value="EntityService.SelectedTable" ValueExpression="() => EntityService.SelectedTable" TValue="string" ValueChanged="SelectedTableChanged">
            @foreach (var table in Tables)
            {
                <option value="@table">@table</option>
            }
        </InputSelect>
        </div>

<dialog id="edit-column-dialog">
    <EditForm OnValidSubmit="EditColumnFunc" Model="SelectedColDescriptor">
        <DataAnnotationsValidator/>
        <div class="field">

            <label for="name-input">Name</label>
            <InputText id="name-input" @bind-Value="SelectedColDescriptor.ColumnDisplayName" placeholder="Column name"/>
            <ValidationMessage For="@(() => SelectedColDescriptor.ColumnName)"/>
        </div>
        <div class="field field-dropdown">
            <label for="type-input">Type</label>
            <InputSelect id="type-input" @bind-Value="SelectedColDescriptor.ColumnValueType">
                @foreach (var item in Enum.GetValues(typeof(ValueTypes)))
                {
                    <option value="@item">@item.ToString()</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => SelectedColDescriptor.ColumnValueType)"/>

        </div>
        <div class="field field-checkbox">
            <label for="enabled-input">Enabled</label>
            <InputCheckbox id="enabled-input" @bind-Value="SelectedColDescriptor.ColumnEnabled"> </InputCheckbox>
            <ValidationMessage For="@(() => SelectedColDescriptor.ColumnEnabled)"/>
        </div>
        <div class="field field-checkbox">
            <label for="visible-input">Visible</label>
            <InputCheckbox id="visible-input" @bind-Value="SelectedColDescriptor.ColumnVisible"> </InputCheckbox>
            <ValidationMessage For="@(() => SelectedColDescriptor.ColumnVisible)"/>
        </div>

        <button @onclick="() => { success = false; }" value="cancel" formmethod="dialog" class="btn btn-danger">Cancel</button>
        <button type="submit" @onclick="() => { success = true; }" class="btn btn-primary">Update</button>

    </EditForm>
</dialog>
<dialog id="add-column-dialog" style="width: 400px">
    <EditForm OnValidSubmit="AddColumnFunc" Model="newColumn">
        <DataAnnotationsValidator/>

        <div class="field">
            <label for="column-name-input">Name</label>
            <InputText id="column-name-input" @bind-Value="newColumn.ColumnName" class="form-control" placeholder="Column name"/>
            <ValidationMessage For="@(() => newColumn.ColumnName)"/>
        </div>

        <div class="field field-dropdown">
            <label for="column-type-input">Type</label>
            <InputSelect id="column-type-input" class="form-control" @bind-Value="newColumn.ColumnValueType">
                @foreach (var item in Enum.GetValues(typeof(ValueTypes)))
                {
                    <option value="@item">@item.ToString()</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => newColumn.ColumnValueType)"/>
        </div>
        @if (newColumn.ColumnValueType == ValueTypes.RELATION)
        {
            <div class="field field-dropdown">
                <label for="table-input">Reference table</label>
                <InputSelect id="table-input" class="form-control" Value="@(newColumn.ReferenceTable)" ValueChanged="SelectedReferenceTableChanged" TValue="string" ValueExpression="() => newColumn.ReferenceTable">
                    @foreach (var table in _tables)
                    {
                        <option value="@table">@table</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => newColumn.ReferenceTable)"/>
            </div>
            <div class="field field-dropdown">
                <label for="table-input">Reference column</label>
                @if (_referenceColumns is not null && _referenceColumns.Any())
                {
                    <InputSelect id="table-input" class="form-control" TValue="Guid" ValueChanged="ReferenceColumnChanged" ValueExpression="() => newColumn.ReferenceColumnGuid">
                        @foreach (var column in _referenceColumns)
                        {
                            <option value="@column.DescriptorId">@column.ColumnDisplayName</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => newColumn.ReferenceColumnGuid)"/>
                }
                else
                {
                    <span>Loading...</span>
                }
            </div>
        }
        @if (IsDropdownAllowed(newColumn.ColumnValueType))
        {
            <div class="field field-checkbox">
                <label for="dropdown-input">Is dropdown field</label>
                <InputCheckbox disabled="@(newColumn.ColumnValueType == ValueTypes.RELATION)" id="dropdown-input" @bind-Value="newColumn.IsDropdown"> </InputCheckbox>
                <ValidationMessage For="@(() => newColumn.IsDropdown)"/>
            </div>
            @if (newColumn.IsDropdown || newColumn.ColumnValueType == ValueTypes.RELATION)
            {
                <div class="field field-checkbox">
                    <label for="multi-field-input">Can select multiple</label>
                    <InputCheckbox id="multi-field-input" @bind-Value="newColumn.IsMultiSelect"> </InputCheckbox>
                    <ValidationMessage For="@(() => newColumn.IsMultiSelect)"/>
                </div>
                @if (newColumn.ColumnValueType != ValueTypes.RELATION)
                {
                <div class="field">
                    <label for="multi-field-inputs-input">Add options to dropdown, separate with a ",".</label>
                    <InputText  id="multi-field-inputs-input" @bind-Value="newColumn.DropdownOptions"></InputText>
                    <ValidationMessage For="@(() => newColumn.DropdownOptions)"/>
                </div>
                    
                }
            }
            
        }
        <button @onclick="() => { success = false; HideDialog(); }" value="cancel" type="reset" formmethod="dialog" class="btn btn-danger">Cancel</button>
        <button type="submit" @onclick="() => { success = true; }" class="btn btn-primary">Add</button>
    </EditForm>
</dialog>
<style>
    
</style>

@code {

    List<string> Tables { get; set; } = new();
    NewColumn newColumn = new NewColumn();

    private void AddColumnFunc()
    {
        JSRuntime.InvokeVoidAsync("HideDialog", "add-column-dialog");
        if (success)
        {
            EntityService.AddColumn(newColumn);
        }
        _colDescriptors = EntityService.GetTableSpec();
    }

    IEnumerable<ColDescriptor>? _colDescriptors;

    private IEnumerable<string>? _tables;
    private IEnumerable<ColDescriptor>? _referenceColumns;
    ColDescriptor SelectedColDescriptor = new();

    public bool success { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Tables = EntityService.GetAllTableNames().ToList();
        EntityService.SelectedTable = Tables.FirstOrDefault();
        _colDescriptors = EntityService.GetTableSpec() ?? new List<ColDescriptor>();
        _tables = EntityService.GetTableNames();
    }

    private void RemoveColumnFunc(Guid id)
    {
        EntityService.RemoveColumn(id);
        _colDescriptors = EntityService.GetTableSpec();
    }


    private void AddDialog()
    {
        newColumn = new NewColumn();
        JSRuntime.InvokeVoidAsync("ShowDialog", "add-column-dialog");
    }

    private void ShowDialog(ColDescriptor colDescriptor)
    {
        SelectedColDescriptor.CopyFrom(colDescriptor);
        JSRuntime.InvokeVoidAsync("ShowDialog", "edit-column-dialog");
    }

    private void EditColumnFunc()
    {
        JSRuntime.InvokeVoidAsync("HideDialog", "edit-column-dialog");
        if (success)
        {
            EntityService.UpdateColumn(SelectedColDescriptor);
        }

        _colDescriptors = EntityService.GetTableSpec();
    }

    private void HideDialog()
    {
        JSRuntime.InvokeVoidAsync("HideDialog", "add-column-dialog");
    }

    private void SelectedReferenceTableChanged(string value)
    {
        newColumn.ReferenceTable = value;
        _referenceColumns = new List<ColDescriptor>();
        _referenceColumns = EntityService.GetColumnsSelectableForRelations(value);
    }

    private void ReferenceColumnChanged(Guid value)
    {
        newColumn.ReferenceColumn = _referenceColumns?.FirstOrDefault(x => x.DescriptorId == value);
    }
    private async Task SelectedTableChanged(string value)
    {
        EntityService.SelectedTable = value;
        _colDescriptors = EntityService.GetTableSpec();
        _tables = EntityService.GetTableNames();
    }

    private bool IsDropdownAllowed(ValueTypes columnValueType)
    {
        return columnValueType is ValueTypes.STRING or ValueTypes.RELATION;
    }

}