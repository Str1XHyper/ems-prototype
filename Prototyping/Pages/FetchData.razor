@page "/fetchdata"
@using Interfaces
@using System.Diagnostics
@using Models.Models
@inject IEntityService EntityService

<PageTitle>DB</PageTitle>

<h1>Read</h1>
<div class="field field-dropdown" style="max-width: 400px">
<InputSelect Value="EntityService.SelectedTable" ValueExpression="() => EntityService.SelectedTable" TValue="string" ValueChanged="SelectedTableChanged">
    @foreach (var table in Tables)
    {
        <option value="@table">@table</option>
    }
</InputSelect>
</div>
<div style="height: 70vh; width: 80vw">
    <div class="d-flex flex-wrap flex-column card" style="max-height: 100%; overflow: auto; max-width: 100%;">
        <table class="result-table">

            <colgroup>

                @foreach (var col in cols.Where(x => x.ColumnVisible))
                {
                    <col>
                }
            </colgroup>
            <tr >
                @foreach (var col in cols.Where(x => x.ColumnVisible))
                {
                    <th class="px-2" style="text-overflow: ellipsis; text-wrap: nowrap ">@col.ColumnDisplayName</th>
                }

            </tr>
            @if (UseDate)
            {
                <Virtualize @ref="DateScopedVirtualizer" OverscanCount="20" ItemsProvider="GetEntitiesByDateScoped" ItemSize="24" Context="row">
                    <tr style="height: 24px" class="border-bottom">
                        @foreach (var item in row.Where(x => x.Key.ColumnVisible))
                        {
                            <td class="px-2" style="text-overflow: ellipsis; text-wrap: nowrap ">@item.Value</td>
                        }
                    </tr>
                </Virtualize>
            }
            else
            {
                <Virtualize @ref="DefaultVirtualizer" OverscanCount="20" ItemsProvider="GetEntitiesScoped" ItemSize="24" Context="row">
                    <tr style="height: 24px" class="border-bottom">
                        @foreach (var item in row.Where(x => x.Key.ColumnVisible))
                        {
                            <td class="px-2" style="text-overflow: ellipsis; text-wrap: nowrap ">@item.Value</td>
                        }
                    </tr>
                </Virtualize>
            }
        </table>
    </div>
</div>
<div class="d-flex flex-row align-items-center gap-4 my-2">
    <div>
        <label for="use-date">Use date</label>
        <InputCheckbox Value="UseDate" ValueExpression="() => UseDate" ValueChanged="@(GetNewTotal)" id="use-date" DisplayName="Use date"></InputCheckbox>
    </div>
    <div class="field mb-0">
        <InputDate @bind-Value="EntityService.SelectedDateTime" Type="InputDateType.DateTimeLocal" TValue="DateTime"></InputDate>
    </div>
    <button class="btn btn-outline-primary" @onclick="Refresh">
        <i class="fas fa-refresh"></i>
    </button>
</div>

<span>Records: @total</span>
<br>
<span>Time elapsed: @stopwatch.Elapsed</span>
<br>
<span>Current average: @averageTimeSpan</span>
@* *@
@* <button class="btn btn-primary" @onclick="Run">Run</button> *@
@* <br> *@
@* <button class="btn btn-primary" @onclick="RunWithDate">Run with date</button> *@


<style>
.result-table colgroup col:nth-child(even) {
background-color: #0001;
}
</style>

@code {
    List<Dictionary<ColDescriptor, object>> test = new();
    Stopwatch stopwatch = new();
    List<TimeSpan> _timeSpans = new();
    int total;
    List<ColDescriptor> cols = new();
    List<string> Tables { get; set; } = new();

    double averageTimeSpan => _timeSpans.Any() ? _timeSpans.Average(x => x.TotalMilliseconds) : 0;

    protected override void OnInitialized()
    {
        Tables = EntityService.GetAllTableNames().ToList();
        EntityService.SelectedTable = Tables.FirstOrDefault();
        total = EntityService.GetEntityCount();
    }

    private async ValueTask<ItemsProviderResult<Dictionary<ColDescriptor, object>>> GetEntitiesScoped(ItemsProviderRequest request)
    {
        stopwatch.Reset();
        stopwatch.Start();
        List<Dictionary<ColDescriptor, object>> entities = EntityService.GetRangeOfEntities(request.StartIndex, request.StartIndex + request.Count);

        var result = new ItemsProviderResult<Dictionary<ColDescriptor, object>>(entities, total);
        cols = entities.FirstOrDefault()?.Keys.Where(x => x.ColumnVisible).ToList() ?? new();
        stopwatch.Stop();
        _timeSpans.Add(stopwatch.Elapsed);
        await InvokeAsync(StateHasChanged);
        return result;
    }

    public bool UseDate { get; set; }

    private async ValueTask<ItemsProviderResult<Dictionary<ColDescriptor, object>>> GetEntitiesByDateScoped(ItemsProviderRequest request)
    {
        stopwatch.Reset();
        stopwatch.Start();
        List<Dictionary<ColDescriptor, object>> entities = EntityService.GetRangeOfEntitiesBySelectedDate(request.StartIndex, request.StartIndex + request.Count);
        var result = new ItemsProviderResult<Dictionary<ColDescriptor, object>>(entities, total);
        cols = entities.FirstOrDefault()?.Keys.Where(x => x.ColumnVisible).ToList() ?? new();
        stopwatch.Stop();
        _timeSpans.Add(stopwatch.Elapsed);
        await InvokeAsync(StateHasChanged);
        return result;
    }

    private void GetNewTotal(bool value)
    {
        UseDate = value;
        if (UseDate)
        {
            total = EntityService.GetEntityCountByDate();
        }
        else
        {
            total = EntityService.GetEntityCount();
        }
    }

    private async Task Refresh()
    {
        if (UseDate)
        {
            total = EntityService.GetEntityCountByDate();
            await DateScopedVirtualizer.RefreshDataAsync();
        }
        else
        {
            total = EntityService.GetEntityCount();
            await DefaultVirtualizer.RefreshDataAsync();
        }
    }

    public Virtualize<Dictionary<ColDescriptor, object>> DateScopedVirtualizer { get; set; }
    public Virtualize<Dictionary<ColDescriptor, object>> DefaultVirtualizer { get; set; }

    private async Task SelectedTableChanged(string value)
    {
        EntityService.SelectedTable = value;
        await Refresh();
    }

}