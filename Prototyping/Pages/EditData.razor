@page "/editdata"
@using Interfaces
@using Models.Enums
@using Models.Structs
@inject IEntityService EntityService
@inject IJSRuntime JSRuntime
<h1>Edit data</h1>
    <div style="height: 70vh; width: 80vw">
        <div class="d-flex flex-wrap flex-column card" style="max-height: 100%; overflow: auto; max-width: 100%;">
            <table class="result-table">

                <colgroup>

                    @foreach (var col in cols.Where(x => x.ColumnVisible))
                    {
                        <col>
                    }
                    <col style="width: 50px">
                </colgroup>
                <tr >
                    @foreach (var col in cols.Where(x => x.ColumnVisible))
                    {
                        <th class="px-2" style="text-overflow: ellipsis; text-wrap: nowrap ">@col.ColumnDisplayName</th>
                    }
                    <th class="px-2" style="text-overflow: ellipsis; text-wrap: nowrap ">Actions</th>
                </tr>
                <Virtualize @ref="DefaultVirtualizer" OverscanCount="20" ItemsProvider="GetEntitiesScoped" ItemSize="24" Context="row">
                    <tr style="height: 24px" class="border-bottom">
                        @foreach (var item in row.Where(x => x.Key.ColumnVisible))
                        {
                            <td class="px-2" style="text-overflow: ellipsis; text-wrap: nowrap ">@item.Value</td>
                        }
                        <td>
                            <button @onclick="() => { ShowDialog(row); }" class="btn btn-outline-primary">
                                <i class="fas fa-pencil"></i>
                            </button>
                            @* <button @onclick="() => { RemoveColumnFunc(descriptor.DescriptorId);}" class="btn btn-outline-danger"><i class="fas fa-trash"></i></button> *@
                        </td>
                    </tr>
                </Virtualize>

            </table>
        </div>
        <div class="field field-dropdown" style="max-width: 400px">
        <InputSelect Value="EntityService.SelectedTable" ValueExpression="() => EntityService.SelectedTable" TValue="string" ValueChanged="SelectedTableChanged">
            @foreach (var table in Tables)
            {
                <option value="@table">@table</option>
            }
        </InputSelect>
        </div>
    </div>
<dialog id="edit-row-dialog" style="width: 400px">
    <EditForm OnValidSubmit="EditRow" Model="SelectedRow">
        @foreach (var kvp in SelectedRow.Where(x => x.Key.ValueEditable))
        {
            @if (kvp.Key.ColumnValueType == ValueTypes.RELATION)
            {
                <div class="field field-dropdown">
                <label for="@kvp.Key.ColumnName">@kvp.Key.ColumnDisplayName</label>
                <select id="@kvp.Key.ColumnName" style="width: 100%"  @onchange="(c) => { OnChangeHandler(kvp.Key, c); }" @oninput="c => { OnChangeHandler(kvp.Key, c); }">
                    @foreach (var row in _relations[kvp.Key])
                    {
                        <option value="@row.First(x => x.Key.ColumnName == "person_Id_1").Value">@row.FirstOrDefault(x => x.Key.ColumnName.Contains("Name")).Value</option>
                    }
                </select>
                    
                </div>   
            }
            else
            {
            
            <div class="field ">
                <label for="@kvp.Key.ColumnName">@kvp.Key.ColumnDisplayName</label>
                @{
                    var type = kvp.Key.ColumnValueType switch{
                        
                        ValueTypes.NUMBER => "number",
                        ValueTypes.STRING => "text",
                        ValueTypes.DATE => "date",
                        ValueTypes.BOOLEAN => "checkbox",
                        ValueTypes.GUID => "text",
                        ValueTypes.EMAIL => "email",
                        ValueTypes.PHONE => "tel",
                        ValueTypes.URL => "url",
                        ValueTypes.PASSWORD => "password",
                        ValueTypes.CURRENCY => "number",
                        ValueTypes.PERCENTAGE => "number",
                        ValueTypes.DATETIME => "datetime-local",
                        ValueTypes.TIME => "time",
                        _ => throw new ArgumentOutOfRangeException()
                        
                        };
                    if (kvp.Key.ColumnValueType == ValueTypes.DATETIME)
                    {
                        <input id="@kvp.Key.ColumnName" style="width: 100%" type="@type" value="@((kvp.Value as DateTime? ?? DateTime.Now).ToString("s"))" @onchange="(c) => { OnChangeHandler(kvp.Key, c); }" @oninput="c => { OnChangeHandler(kvp.Key, c); }"/>
                    }
                    else
                    {
                        <input id="@kvp.Key.ColumnName" style="width: 100%" type="@type" value="@kvp.Value" @onchange="(c) => { OnChangeHandler(kvp.Key, c); }" @oninput="c => { OnChangeHandler(kvp.Key, c); }"/>
                    }
                }
                
            </div>
            }
        }
        <button @onclick="() => { success = false; }" value="cancel" formmethod="dialog" class="btn btn-danger">Cancel</button>
        <button type="submit" @onclick="() => { success = true; }" class="btn btn-primary">Update</button>

    </EditForm>
</dialog>

@code {
    bool success = false;

    Dictionary<ColDescriptor, object> SelectedRow = new();
    Dictionary<ColDescriptor, List<Dictionary<ColDescriptor, object>>> _relations = new();
    // IEnumerable<ColDescriptor> _colDescriptors;
    List<ColDescriptor> cols = new();
    int total;
    List<string> Tables { get; set; } = new();

    protected override void OnInitialized()
    {
        GetNewTotal();
        Tables = EntityService.GetAllTableNames().ToList();
    }

    private void ShowDialog(Dictionary<ColDescriptor, object> row)
    {
        SelectedRow.Clear();
        _relations.Clear();
        foreach (var kvp in row)
        {
            if (kvp.Key.ColumnValueType == ValueTypes.RELATION)
            {
                _relations.Add(kvp.Key,EntityService.GetRelationData(kvp.Key));
            }
            SelectedRow.Add(kvp.Key, kvp.Value);
        }
    // SelectedRow = SelectedRow.Union(row).ToDictionary(x => x.Key, x => x.Value);
        JSRuntime.InvokeVoidAsync("ShowDialog", "edit-row-dialog");
    }

    private async Task EditRow()
    {
        await JSRuntime.InvokeVoidAsync("HideDialog", "edit-row-dialog");
        if (success)
        {
            EntityService.UpdateRow(SelectedRow);
        }

        await Refresh();
    }

    // private void Run()
    // {
    //     Data = EntityService.GetAllEntities();
    //     _colDescriptors = EntityService.GetTableSpec();
    // }

    private void OnChangeHandler(ColDescriptor kvpKey, ChangeEventArgs changeEventArgs)
    {
        SelectedRow[kvpKey] = changeEventArgs.Value;
    }

    private void GetNewTotal()
    {
        total = EntityService.GetEntityCount();
    }

    private async Task Refresh()
    {
        total = EntityService.GetEntityCount();
        await DefaultVirtualizer.RefreshDataAsync();
    }

    private async ValueTask<ItemsProviderResult<Dictionary<ColDescriptor, object>>> GetEntitiesScoped(ItemsProviderRequest request)
    {
        var entities = EntityService.GetRangeOfEntities(request.StartIndex, request.StartIndex + request.Count);

        var result = new ItemsProviderResult<Dictionary<ColDescriptor, object>>(entities, total);
        cols = entities.FirstOrDefault()?.Keys.Where(x => x.ColumnVisible).ToList() ?? new();
        await InvokeAsync(StateHasChanged);
        return result;
    }

    public Virtualize<Dictionary<ColDescriptor, object>> DefaultVirtualizer { get; set; }
    private async Task SelectedTableChanged(string value)
    {
        EntityService.SelectedTable = value;
        await Refresh();
    }
}