@page "/editdata"
@using Interfaces
@using Models.Enums
@using Models.Structs
@inject IEntityService EntityService
@inject IJSRuntime JSRuntime
<h1>Edit data</h1>
<div class="flex flex-wrap flex-column card ">
    @if (Data.Any())
    {
        <table>
            <tr>
                @foreach (var col in Data.First().Keys)
                {
                    <th>@col.ColumnDisplayName</th>
                }
                <th>Actions</th>
            </tr>
            @foreach (var row in Data.Take(5))
            {
                <tr>
                    @foreach (var item in row)
                    {
                        <td>@item.Value</td>
                    }
                    <td>
                        <button @onclick="() => { ShowDialog(row); }" class="btn btn-outline-primary">
                            <i class="fas fa-pencil"></i>
                        </button>
                        @* <button @onclick="() => { RemoveColumnFunc(descriptor.DescriptorId);}" class="btn btn-outline-danger"><i class="fas fa-trash"></i></button> *@
                    </td>
                </tr>
            }
        </table>
    }
</div>
<dialog id="edit-row-dialog" style="width: 400px">
    <EditForm OnValidSubmit="EditRow" Model="SelectedRow">
        @foreach (var kvp in SelectedRow)
        {
            <div class="form-group">
                <label for="@kvp.Key.ColumnName">@kvp.Key.ColumnDisplayName</label>
                @{
                    var type = kvp.Key.ColumnValueType switch{
                        
                        ValueTypes.NUMBER => "number",
                        ValueTypes.STRING => "text",
                        ValueTypes.DATE => "date",
                        ValueTypes.BOOLEAN => "checkbox",
                        ValueTypes.GUID => "text",
                        ValueTypes.EMAIL => "email",
                        ValueTypes.PHONE => "tel",
                        ValueTypes.URL => "url",
                        ValueTypes.PASSWORD => "password",
                        ValueTypes.CURRENCY => "number",
                        ValueTypes.PERCENTAGE => "number",
                        ValueTypes.DATETIME => "datetime-local",
                        ValueTypes.TIME => "time",
                        _ => throw new ArgumentOutOfRangeException()
                        
                        };
                    if (kvp.Key.ColumnValueType == ValueTypes.DATETIME)
                    {
                        <input id="@kvp.Key.ColumnName" style="width: 100%" type="@type" value="@((kvp.Value as DateTime? ?? DateTime.Now).ToString("s"))" @onchange="(c) => { OnChangeHandler(kvp.Key, c); }" @oninput="c => { OnChangeHandler(kvp.Key, c);}"/>
                    }
                    else
                    {
                        <input id="@kvp.Key.ColumnName" style="width: 100%" type="@type" value="@kvp.Value" @onchange="(c) => { OnChangeHandler(kvp.Key, c); }" @oninput="c => { OnChangeHandler(kvp.Key, c);}"/>
                    }


                }
            </div>
        }
        <button @onclick="() => { success = false; }" value="cancel" formmethod="dialog" class="btn btn-danger">Cancel</button>
        <button type="submit" @onclick="() => { success = true; }" class="btn btn-primary">Update</button>

    </EditForm>
</dialog>

@code {
    bool success = false;

    List<Dictionary<ColDescriptor, object>> Data = new();
    Dictionary<ColDescriptor, object> SelectedRow = new();
    IEnumerable<ColDescriptor> _colDescriptors;


    protected override void OnInitialized()
    {
        Run();
    }

    private void ShowDialog(Dictionary<ColDescriptor, object> row)
    {
        SelectedRow.Clear();
        foreach (var kvp in row)
        {
            SelectedRow.Add(kvp.Key, kvp.Value);
        }
    // SelectedRow = SelectedRow.Union(row).ToDictionary(x => x.Key, x => x.Value);
        JSRuntime.InvokeVoidAsync("ShowDialog", "edit-row-dialog");
    }

    private void EditRow()
    {
        JSRuntime.InvokeVoidAsync("HideDialog", "edit-row-dialog");
        if (success)
        {
            EntityService.UpdateRow(SelectedRow);
        }

        Run();
    }

    private void Run()
    {
        Data = EntityService.GetAllEntities();
        _colDescriptors = EntityService.GetTableSpec();
    }

    private void OnChangeHandler(ColDescriptor kvpKey, ChangeEventArgs changeEventArgs)
    {
        SelectedRow[kvpKey] = changeEventArgs.Value;
    }

}